require("class")
require("moduleconfig")

local ok, new_tab = pcall(require, "table.new")
if not ok then
    new_tab = function (narr, nrec) return {} end
end

---@class netmanager
local modulemanager = class()
modulemanager.singleton = 'modulemanager'

modulemanager.init = function (self)
    self.gameObject = CS.UnityEngine.GameObject("ModuleManager")
    CS.UnityEngine.Object.DontDestroyOnLoad(self.gameObject)
    self.modules = {} -- key name value talel
    for tn,desc in pairs(modules) do
        local mObj = CS.UnityEngine.GameObject(tn)
        mObj.transform:SetParent(self.gameObject.transform)
        mObj:SetActive(false)
        mObj:AddComponent(typeof(CS.SYUNITY.LuaMonoBehaviour)).luaScriptName = tn
        local module = {}
        module.tn = tn -- xlua规范脚本名就是表名
        module.gb = mObj
        self.modules[module.tn] = module         --由于模块还没激活，所以目前模块还没有产生table
    end

    self.asyncalls = new_tab(0, 10)
end

---@type fun(self:table, tn:string, tb:table)
modulemanager.enablemodule = function(self, tn, tb)
    local module = self.modules[tn]
    if not module then
        CS.UnityEngine.Debug.LogError("no module name: "..tn)
        return
    end 
    module.tb = tb
end

---@type fun(self:table, tn:string)
modulemanager.enable = function(self, tn)
    local module = self.modules[tn]
    if not module or not module.gb then
        CS.UnityEngine.Debug.LogError("no module or gameObject name: "..tn)
        return
    end
    module.gb:SetActive(true) 
end

---@type fun(self:table, tn:string)
modulemanager.disable = function(self, tn)
    local module = self.modules[tn]
    if not module or not module.gb then
        CS.UnityEngine.Debug.LogError("no module or gameObject name: "..tn)
        return
    end
    module.gb:SetActive(false) 
end

---@type fun(self:table, ...:string)
modulemanager.disable_all = function(self, ...)
    local n = select('#', ...)
    if n > 0 then
        for index, value in ipairs(self.modules) do
            local disable = true
            for i = 1, n do
                local param = select(i, ...)
                if param == value.tn then
                    disable = false
                    break
                end
            end
            if disable then value.gb:SetActive(false) end
        end
    else
        for index, value in ipairs(self.modules) do
            value.gb:SetActive(false)
        end
    end
end

---@type fun(self:table, tn:string, func:string)
modulemanager.call_syn = function(self, tn, func, ...)
    local module = self.modules[tn]
    if not module or not module.tb then
        CS.UnityEngine.Debug.LogError("no module or table name: "..tn)
        return
    end
    local f = module.tb[func]
    if not f then
        CS.UnityEngine.Debug.LogError("no function: "..module.tb.modulename.."."..tn)
        return
    end 
    return f(module.tb, ...)
end

return modulemanager()